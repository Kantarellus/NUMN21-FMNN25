import numpy as np


def sides_shape(n):
    #Creates the initial heat matrix for the side rooms
    v = np.zeros((n + 1,n + 2))
    v[:,0] = 15
    v[:,-1] = 15
    v[-1,:] = 40
    return v

def middle_shape(n):
    #Creates the initial heat matrix for the middle room
    f = np.zeros((n + 2,2*n + 1))
    f[:,0] = 5
    f[:,-1] = 40
    f[0,n:] = 15
    f[-1,:n + 1] = 15
    return f

def flow_sides(v):
    #The flow of heat for each iterations according to the Neumann condition
    v[:-1,1:-1] = (v[1:,1:-1] + v[:-1,2:] + v[:-1,:-2]) / 3

def flow_middle(f):
    #The flow of heat for each iteration according to the Dirichlet condition
    f[1:-1,1:-1] = (f[2:, 1:-1] + f[:-2, 1:-1] + f[1:-1, 2:] + f[1:-1, :-2]) / 4

def sides(v, dc):
    #returns the points connected to the middle room
    v[0:2,1:-1] = dc
    flow_sides(v)
    nc = v[0:2,1:-1]
    return nc, v

def middle(f, n, nc_one, nc_two):
    #returns the points connected to the side rooms
    f[0:2,1:n+1] = nc_one
    f[-2:,n:-1] = nc_two
    flow_middle(f)
    dc_lower = f[0:2,1:n+1]
    dc_upper = f[-2:,n:-1]
    return dc_lower, dc_upper

def iterations(n, max_iterations):
    #n is the number of points created along a wall when the mesh width is 1 / (n - 1)
    v_one = sides_shape(n)
    v_two = sides_shape(n)
    f = middle_shape(n)
    nc_one = 0
    nc_two = 0
    for i in range(max_iterations):
        dc_one, dc_two = middle(f, n, nc_one, nc_two)
        nc_one, v_one = sides(v_one, dc_one)
        nc_two, v_two = sides(v_two, dc_two)
    
